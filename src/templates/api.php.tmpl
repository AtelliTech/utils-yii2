<?= "<?php\n" ?>

namespace <?= $name ?>\controllers;

use InvalidArgumentException;
use Throwable;
use <?= $name ?>\components\ActiveApiController;
use yii\data\ActiveDataProvider;
use yii\web\HttpException;
use xxx\xxx\<?= $searchServiceClassName ?>;

/**
 * @OA\Tag(
 *     name="<?= $className ?>",
 *     description="Everything about your <?= $className ?>",
 * )
 *
 * @OA\Get(
 *     path="<?= $apiPath ?>",
 *     summary="List",
 *     description="List all <?= $className ?>",
 *     operationId="list<?= $className ?>",
 *     tags={"<?= $className ?>"},
 *     @OA\Parameter(
 *         name="page",
 *         in="query",
 *         @OA\Schema(ref="#/components/schemas/StandardParams/properties/page")
 *     ),
 *     @OA\Parameter(
 *         name="pageSize",
 *         in="query",
 *         @OA\Schema(ref="#/components/schemas/StandardParams/properties/pageSize")
 *     ),
 *     @OA\Parameter(
 *         name="sort",
 *         in="query",
 *         @OA\Schema(ref="#/components/schemas/StandardParams/properties/sort")
 *     ),
 *     @OA\Parameter(
 *         name="fields",
 *         in="query",
 *         @OA\Schema(ref="#/components/schemas/StandardParams/properties/fields")
 *     ),
 *     @OA\Parameter(
 *         name="expand",
 *         in="query",
 *         @OA\Schema(type="string", enum={"xxxx"}, description="Query related models, using comma(,) be seperator")
 *         @OA\Schema(ref="#/components/schemas/<?= $searchModelClassName ?>/properties/expand"),
 *     ),
 *     @OA\Response(
 *         response=200,
 *         description="Successful operation",
 *         @OA\MediaType(
 *             mediaType="application/json",
 *             @OA\Schema(
 *              @OA\Property(property="_data", type="array", @OA\Items(ref="#/components/schemas/<?= $modelClassName ?>")),
 *              @OA\Property(property="_meta", type="object", ref="#/components/schemas/Pagination")
 *             )
 *         )
 *     )
 * )
 *
 * @OA\Get(
 *     path="<?= $apiPath ?>/{id}",
 *     summary="Get",
 *     description="Get <?= $className ?> by particular id",
 *     operationId="get<?= $className ?>",
 *     tags={"<?= $className ?>"},
 *     @OA\Parameter(
 *         name="id",
 *         in="path",
 *         description="<?= $className ?> id",
 *         required=true,
 *         @OA\Schema(ref="#/components/schemas/<?= $modelClassName ?>/properties/id")
 *     ),
 *     @OA\Parameter(
 *         name="fields",
 *         in="query",
 *         @OA\Schema(ref="#/components/schemas/StandardParams/properties/fields")
 *     ),
 *     @OA\Parameter(
 *         name="expand",
 *         in="query",
 *         @OA\Schema(type="string", enum={"xxxx"}, description="Query related models, using comma(,) be seperator"),
 *         @OA\Schema(ref="#/components/schemas/<?= $searchModelClassName ?>/properties/expand")
 *     ),
 *     @OA\Response(
 *         response=200,
 *         description="Successful operation",
 *         @OA\JsonContent(type="object", ref="#/components/schemas/<?= $modelClassName ?>")
 *     )
 * )
 *
 * @OA\Post(
 *     path="<?= $apiPath ?>",
 *     summary="Create",
 *     description="Create a record of <?= $className ?>",
 *     operationId="create<?= $className ?>",
 *     tags={"<?= $className ?>"},
 *     @OA\RequestBody(
 *         description="<?= $className ?> object that needs to be added",
 *         required=true,
 *         @OA\MediaType(
 *             mediaType="application/json",
 *             @OA\Schema(
<?= $annotations . "\n" ?>
 *             )
 *         ),
 *     ),
 *     @OA\Response(
 *         response=200,
 *         description="Successful operation",
 *         @OA\JsonContent(type="object", ref="#/components/schemas/<?= $modelClassName ?>")
 *     )
 * )
 *
 * @OA\Patch(
 *     path="<?= $apiPath ?>/{id}",
 *     summary="Update",
 *     description="Update a record of <?= $className ?>",
 *     operationId="update<?= $className ?>",
 *     tags={"<?= $className ?>"},
 *     @OA\Parameter(
 *         name="id",
 *         in="path",
 *         description="<?= $className ?> id",
 *         required=true,
 *         @OA\Schema(ref="#/components/schemas/<?= $modelClassName ?>/properties/id")
 *     ),
 *     @OA\RequestBody(
 *         description="<?= $className ?> object that needs to be updated",
 *         required=true,
 *         @OA\MediaType(
 *             mediaType="application/json",
 *             @OA\Schema(
<?= $annotations . "\n" ?>
 *             )
 *         ),
 *     ),
 *     @OA\Response(
 *         response=200,
 *         description="Successful operation",
 *         @OA\JsonContent(type="object", ref="#/components/schemas/<?= $modelClassName ?>")
 *     )
 * )
 *
 * @OA\Delete(
 *     path="<?= $apiPath ?>/{id}",
 *     summary="Delete",
 *     description="Delete a record of <?= $className ?>",
 *     operationId="delete<?= $className ?>",
 *     tags={"<?= $className ?>"},
 *     @OA\Parameter(
 *         name="id",
 *         in="path",
 *         description="<?= $className ?> id",
 *         required=true,
 *         @OA\Schema(ref="#/components/schemas/<?= $modelClassName ?>/properties/id")
 *     ),
 *     @OA\Response(
 *         response=200,
 *         description="Successful operation"
 *     )
 * )
 *
 * @version 1.0.0
 */
class <?= $className ?>Controller extends ActiveApiController
{
    /**
     * @var string $modelClass
     */
    public $modelClass = 'app\models\<?= $className ?>';

    /**
     * {@inherit}
     *
     * @return array<string, mixed>
     */
    public function actions()
    {
        $actions = parent::actions();

        unset($actions['index']);

        return $actions;
    }

    /**
     * @OA\Post(
     *     path="<?= $apiPath ?>/search",
     *     summary="Search",
     *     description="Search <?= $className ?> by particular params",
     *     operationId="search<?= $className ?>",
     *     tags={"<?= $className ?>"},
     *     @OA\RequestBody(
     *         description="search <?= $className ?>",
     *         required=false,
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/<?= $searchModelClassName ?>")
     *         ),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Successful operation",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *              @OA\Property(property="_data", type="array", @OA\Items(ref="#/components/schemas/<?= $modelClassName ?>")),
     *              @OA\Property(property="_meta", type="object", ref="#/components/schemas/Pagination")
     *             )
     *         )
     *     )
     * )
     *
     * Search <?= $className . "\n" ?>
     *
     * @param <?= $searchServiceClassName ?> $service
     * @return ActiveDataProvider
     */
    public function actionSearch(<?= $searchServiceClassName ?> $service): ActiveDataProvider
    {
        try {
            $params = $this->getRequestParams();
            return $service->search($params);
        } catch (InvalidArgumentException $e) {
            throw new HttpException(400, $e->getMessage());
        } catch (Throwable $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
}
